WHERE EMPLOYEE_PHONE.OFFICE IN
(SELECT EMPLOYEE_PHONE.OFFICE GROUP BY HAVING COUNT(*) > 1)
')
# 2. Find the names and phone extension of all employees who share an office.
dbGetQuery(PSTAT10db, 'SELECT EMPLOYEE.NAME, EMPLOYEE_PHONE.EXTENSION FROM
EMPLOYEE JOIN EMPLOYEE_PHONE ON EMPLOYEE.EMP_NO = EMPLOYEE_PHONE.EMP_NO
WHERE EMPLOYEE_PHONE.OFFICE IN
(SELECT EMPLOYEE_PHONE.OFFICE FROM EMPLOYEE_PHONE GROUP BY OFFICE
HAVING COUNT(*) > 1) ')
dbGetRowsAffected(DEL_GEAR4)
# 4. Add the mtcars dataset to your database (if it is not there already):
# a) Remove the tuples from the relation with a gear value of 4.
data("mtcars")   # Loading the dataset
DEL_GEAR4 <- dbSendStatement(PSTAT10db, 'DELETE FROM MTCARS WHERE GEAR = 4 ')
dbGetRowsAffected(DEL_GEAR4)
# c) Restore gear 4 to all queries involving mtcars.
dbWriteTable(PSTAT10db, "mtcars", mtcars, overwrite = TRUE)  # Restoring the gear 4 to queries
dbGetQuery(PSTAT10db, 'SELECT * FROM MTCARS')  # Checking if the tuples have gear 4, Yes gear is
# b) Order gear to show that all gears except gear 4 are returned.
dbGetQuery(PSTAT10db, 'SELECT GEAR FROM mtcars ORDER BY GEAR')
library(DBI)
library(RSQLite)
library(sqldf)
PSTAT10db <- dbConnect(RSQLite::SQLite(), "PSTAT10db.sqlite")
dbListTables(PSTAT10db)   # Checking if the database is connected
library(DBI)
library(RSQLite)
library(sqldf)
PSTAT10db <- dbConnect(RSQLite::SQLite(), "PSTAT10db.sqlite")
dbListTables(PSTAT10db)   # Checking if the database is connected
# 1. How many customers does ‘Tiny Clothes’ currently have?
dbGetQuery(PSTAT10db, 'SELECT COUNT(*) FROM CUSTOMER')
# 2. Are there any customers in the database whose address is missing?
dbGetQuery(PSTAT10db, 'SELECT * FROM CUSTOMER')
dbGetQuery(PSTAT10db, 'SELECT * FROM CUSTOMER WHERE ADDRESS IS NULL')
# 3. Which orders are invoiced for a quantity of 10 000 or more items?
dbGetQuery(PSTAT10db, 'SELECT * FROM INVOICES')
dbGetQuery(PSTAT10db, 'SELECT * FROM INVOICES WHERE QUANTITY <= 10000')
dbGetQuery(PSTAT10db, 'SELECT * FROM INVOICES WHERE QUANTITY >= 10000')
# 4. Write SQL code to return only the attribute names of CUSTOMER
dbGetQuery(PSTAT10db, 'SELECT * FROM CUSTOMER')
dbGetQuery(PSTAT10db, 'SELECT NAME FROM CUSTOMER')
dbGetQuery(PSTAT10db, 'SELECT * FROM INVOICES WHERE QUANTITY >= 10000')
# 3. Which orders are invoiced for a quantity of 10 000 or more items?
dbGetQuery(PSTAT10db, 'SELECT * FROM INVOICES')
dbGetQuery(PSTAT10db, 'SELECT ORDER_NO FROM INVOICES GROUP BY ORDER_NO HAVING QUANTITY >= 10000')
dbGetQuery(PSTAT10db, 'SELECT ORDER_NO FROM INVOICES GROUP BY ORDER_NO HAVING (QUANTITY >= 10000)')
# 3. Which orders are invoiced for a quantity of 10 000 or more items?
dbGetQuery(PSTAT10db, 'SELECT * FROM INVOICES')
dbGetQuery(PSTAT10db, 'SELECT ORDER_NO, SUM(QUANTITY) FROM INVOICES GROUP BY ORDER_NO
HAVING SUM(QUANTITY >= 10000)')
dbGetQuery(PSTAT10db, 'SELECT ORDER_NO, SUM(QUANTITY) FROM INVOICES GROUP BY ORDER_NO
HAVING SUM(QUANTITY) > 20000 ')
# 3. Which orders are invoiced for a quantity of 10 000 or more items?
dbGetQuery(PSTAT10db, 'SELECT * FROM INVOICES')
dbGetQuery(PSTAT10db, 'SELECT ORDER_NO, SUM(QUANTITY) FROM INVOICES GROUP BY ORDER_NO
HAVING SUM(QUANTITY >= 10000)')
?dbListFields
dbListFields(PSTAT10db, CUSTOMERX)
dbListFields(PSTAT10db, CUSTOMER)
dbListFields(PSTAT10db, "CUSTOMER")
# 4. Write SQL code to return only the attribute names of CUSTOMER
dbGetQuery(PSTAT10db, 'SELECT * FROM CUSTOMER')
dbListFields(PSTAT10db, "CUSTOMER")
# 1. How many customers does ‘Tiny Clothes’ currently have?
dbGetQuery(PSTAT10db, 'SELECT COUNT(*) FROM CUSTOMER')
# 1. How many customers does ‘Tiny Clothes’ currently have?
dbGetQuery(PSTAT10db, 'SELECT DISTINCT COUNT(*) FROM CUSTOMER')
# 1. How many customers does ‘Tiny Clothes’ currently have?
dbGetQuery(PSTAT10db, 'SELECT * FROM CUSTOMER')
dbGetQuery(PSTAT10db, 'SELECT DISTINCT COUNT(NAME) FROM CUSTOMER')
# 2. Are there any customers in the database whose address is missing?
dbGetQuery(PSTAT10db, 'SELECT * FROM CUSTOMER WHERE ADDRESS IS NULL')
# 3. Which orders are invoiced for a quantity of 10 000 or more items?
dbGetQuery(PSTAT10db, 'SELECT * FROM INVOICES')
dbGetQuery(PSTAT10db, 'SELECT ORDER_NO, SUM(QUANTITY) FROM INVOICES GROUP BY ORDER_NO
HAVING SUM(QUANTITY >= 10000)')
# 4. Write SQL code to return only the attribute names of CUSTOMER
dbGetQuery(PSTAT10db, 'SELECT * FROM CUSTOMER')
dbListFields(PSTAT10db, "CUSTOMER")
library(DBI)
library(RSQLite)
library(sqldf)
PSTAT10db <- dbConnect(RSQLite::SQLite(), "PSTAT10db.sqlite")
dbListTables(PSTAT10db)   # Checking if the database is connected
dbGetQuery(PSTAT10db, 'SELECT * FROM PRODUCT')
dbGetQuery(PSTAT10db, 'SELECT * FROM STOCK')
dbGetQuery(PSTAT10db, 'SELECT * FROM STOCK_TOTAL')
dbGetQuery(PSTAT10db, 'SELECT FROM SALES_ORDER')
dbGetQuery(PSTAT10db, 'SELECT * FROM SALES_ORDER')
dbGetQuery(PSTAT10db, 'SELECT * FROM INVOICES')
dbListTables(PSTAT10db)   # Checking if the database is connected
dbGetQuery(PSTAT10db, 'SELECT * FROM CUSTOMER')
dbGetQuery(PSTAT10db, 'SELECT * FROM SALES_ORDER_LINE')
dbGetQuery(PSTAT10db, 'SELECT * FROM PRODUCT')
dbGetQuery(PSTAT10db, 'SELECT * FROM STOCK_TOTAL')
dbGetQuery(PSTAT10db, 'SELECT * FROM SALES_ORDER_LINE')
dbGetQuery(PSTAT10db, 'SELECT * FROM SALES_ORDER')
dbGetQuery(PSTAT10db, 'SELECT PRODUCT.PROD_NO, PRODUCT.NAME, PRODUCT.COLOR
SALES_ORDER_LINE.ORDER_NO, SALES_ORDER_LINE.QUANTITY
FROM PRODUCT INNER JOIN SALES_ORDER_LINE ON PRODUCT.PROD_NO = SALES_ORDER_LINE.PROD_NO')
dbGetQuery(PSTAT10db, 'SELECT PRODUCT.PROD_NO, PRODUCT.NAME, PRODUCT.COLOR
SALES_ORDER_LINE.ORDER_NO, SALES_ORDER_LINE.QUANTITY
FROM PRODUCT INNER JOIN SALES_ORDER_LINE ON
PRODUCT.PROD_NO = SALES_ORDER_LINE.PROD_NO')
dbGetQuery(PSTAT10db, 'SELECT PRODUCT.PROD_NO, PRODUCT.NAME, PRODUCT.COLOR,
SALES_ORDER_LINE.ORDER_NO, SALES_ORDER_LINE.QUANTITY
FROM PRODUCT INNER JOIN SALES_ORDER_LINE ON
PRODUCT.PROD_NO = SALES_ORDER_LINE.PROD_NO')
#
dbRemoveTable(PSTAT10db, "iris")
dbListTables(PSTAT10db)   # Checking if the database is connected
#
dbRemoveTable(PSTAT10db, "airquality")
#
dbRemoveTable(PSTAT10db, "mtcars")
dbListTables(PSTAT10db)   # Checking if the database is connected
# a) Add the tuple ‘D4, COMPLAINTS, E3’ to the relation ‘DEPARTMENT’.
dbSendStatement(PSTAT10db, 'INSERT INTO DEPARTMENT VALUES ("D4", "COMPLAINTS", "E3")')
dbGetQuery(PSTAT10db, 'SELECT * FROM DEPARTMENT')
dbReadTable(PSTAT10db, "PRODUCT")
# b) Create a new department relation, called NEW_DEPARTMENT that includes the tuple
# added in a).
dbGetQuery(PSTAT10db, 'SELECT * FROM DEPARTMENT WHERE DEPT_NO  = "D4" ')
NEW_DEPARTMENT <- dbGetQuery(PSTAT10db, 'SELECT * FROM DEPARTMENT WHERE DEPT_NO  = "D4" '))
NEW_DEPARTMENT <- dbGetQuery(PSTAT10db, 'SELECT * FROM DEPARTMENT WHERE DEPT_NO  = "D4" ')
dbWriteTable(PSTAT10db, "NEW_DEPARTMENT", NEW_DEPARTMENT, overwrite = TRUE)
dbListTables(PSTAT10db)
dbRemoveTable(ALEX_PREFERENCES)
dbRemoveTable(PSTAT10, ALEX_PREFERENCES)
RemoveTable(PSTAT10, ALEX_PREFERENCES)
Remove(PSTAT10, ALEX_PREFERENCES)
RM(PSTAT10, ALEX_PREFERENCES)
dbRemoveTable(PSTAT10, ALEX_PREFERENCES)
dbRemoveTable(PSTAT10DB, ALEX_PREFERENCES)
dbRemoveTable(PSTAT10db, ALEX_PREFERENCES)
dbRemoveTable(PSTAT10db, ALEX_PREFERENCES)
dbListTables(PSTAT10db)
# d) Delete NEW_DEPARTMENT.
dbRemoveTable(PSTAT10db, NEW_DEPARTMENT)
# d) Delete NEW_DEPARTMENT.
dbRemoveTable(PSTAT10db, "NEW_DEPARTMENT")
# d) Delete NEW_DEPARTMENT.
dbRemoveTable(PSTAT10db, "ALEX_PREFRENCES")
# d) Delete NEW_DEPARTMENT.
dbRemoveTable(PSTAT10db, "ALEX_PREFERENCES")
# d) Delete NEW_DEPARTMENT.
dbRemoveTable(PSTAT10db, "NEW_DEPARTMENT")
# e) Check that NEW_DEPARTMENT has been deleted.
dbListTables(PSTAT10db)
ion NEW_DEPARTMENT, and thus we are certain, it
# has been removed from the database.
dbGetQuery(PSTAT10db, 'SELECT PRODUCT.PROD_NO, PRODUCT.NAME, PRODUCT.COLOR,
SALES_ORDER_LINE.ORDER_NO, SALES_ORDER_LINE.QUANTITY
FROM PRODUCT INNER JOIN SALES_ORDER_LINE ON
PRODUCT.PROD_NO = SALES_ORDER_LINE.PROD_NO')
# a) Add the tuple ‘D4, COMPLAINTS, E3’ to the relation ‘DEPARTMENT’.
dbSendStatement(PSTAT10db, 'INSERT INTO DEPARTMENT VALUES ("D4", "COMPLAINTS", "E3")')
dbGetQuery(PSTAT10db, 'SELECT * FROM DEPARTMENT')
library(DBI)
library(RSQLite)
library(sqldf)
PSTAT10db <- dbConnect(RSQLite::SQLite(), "PSTAT10db.sqlite")
dbListTables(PSTAT10db)
titanic <- read.csv("/Users/heaven/Desktop/PSTAT 10/Week 10")
getwd()
titanic <- read.csv("/Users/heaven/Desktop/PSTAT 10/Week 10/titanic.csv")
is.data.frame(titanic
)
# Take a look at the data
View(titanic)
# The first 7 obs
head(titanic, n =2)
tail(titanic, n=2)
names(titanic)
str(titanic)
str(titanic) # show the type of each variable (int, factor etc.)
summary(titanic)
summary(titanic)  # summary of the dataset
# interpreting the results
# summary statistics for a particular vairable in the dataset.
summary(titanic$fare)
# interpreting the results
# summary statistics for a particular vairable in the dataset.
summary(titanic$fare)
# interpreting the results
# summary statistics for a particular vairable in the dataset.
summary(titanic$Fare)
# use as_tibble to show only the first 10 rows.
as_tibble(titanic)
library(tibble)
# use as_tibble to show only the first 10 rows.
as_tibble(titanic)
# Now assume we are interested in showing how many people survived compared with how many
# people did not survive.
# First, a simple count
count <- table(titanic$Survived)
count
sum(count)
count <- table(titanic$Survived)
barplot(count)
barplot(count, main = "Survivors", xlab = "Number of survivors")
# A useful function that we did not use in the class is prop.table()
prop.table(table(titanic$Survived))
# a stacked barplot
barplot(count2, main = "Survivors", xlab = "SEX", ylab = "Number of passengers",
names.arg = c("female", "male"))
# Compare the age, gender, and passenger lass of the survivors.
# Look at the variable Age, gender, pclass
# graphical representation.
count2 <- table(titanic$Survived, titanic$Sex)
# a stacked barplot
barplot(count2, main = "Survivors", xlab = "SEX", ylab = "Number of passengers",
names.arg = c("female", "male"))
# so we need to add a legend
barplot(count2, main = "Survivors", xlab = "SEX", ylab = "Number of passengers",
names.arg = c("female", "male"), legend = rownames(counts) )
# so we need to add a legend
barplot(count2, main = "Survivors", xlab = "SEX", ylab = "Number of passengers",
names.arg = c("female", "male"), legend = rownames(count) )
# We need to add a legend
barplot(count2, main = "Survivors", xlab = "SEX", ylab = "Number of passengers",
names.arg = c("female", "male"), legend = rownames(count) )
# what about some colours?
barplot(count2, main = "Survivors", xlab = "SEX", ylab = "Number of passengers",
names.arg = c("female", "male"), legend = rownames(count), col = c("yellow","pink") )
# What conclusions can we draw from all this analysis?
rownames2 <- c("did not survive", "survived")
barplot(count2, main = "Survivors", xlab = "SEX", ylab = "Number of passengers",
names.arg = c("female", "male"), legend = rownames2, col = c("yellow","pink"))
data("airquality")
as_tibble(airquality)
# some statistics
mean(airquality)
median(airquality)
median(airquality$Temp)
# some statistics
mean(airquality$Temp)
median(airquality$Temp)
attach(airquality)
mean(temp)
mean(Temp)
median(Temp)
summary(airquality)
quantile(Temp)
# To get summary stastistics for multiple columns at once, use apply()
# Remember, 2 indicates columns
apply(airquality, 2, mean)
apply(airquality, 1, mean)
# Ozone and Solar.R have missing values.
# Exclude missing values.
apply(airquality, 2, mean, na.rm=T)
# notice that ozone has missing values
summary(Ozone)
# histogram of temperatures
hist(Temp, breaks="struges", main ="Airquality: Temperature",
col="yellow")
# histogram of temperatures
hist(Temp, breaks="Struges", main ="Airquality: Temperature",
col="yellow")
hist(Temp, breaks="Struges", main ="Airquality: Temperature",
col="yellow")
# histogram of temperatures
hist(Temp, breaks="Sturges", main ="Airquality: Temperature",
col="yellow")
par(mfrow = c(2,2))
hist(Ozone)
hist(Temp, breaks = "Sturges", main = "Airquality: Temperature",
col = "Yellow")
hist(Ozone)
hist(Temp, breaks = "Sturges", main = "Airquality: Temperature",
col = "Pink")
detach(airquality)
par(mfcol = c(2,2))
hist(Ozone)
hist(Temp, breaks = "Sturges", main = "Airquality: Temperature",
col = "Pink")
# Is Temp normally distributed ?
# As a guide to further investigation
qqnorm(airquality$Temp)
# Is Temp normally distributed ?
# As a guide to further investigation
qqnorm(airquality$Temp)
qqline(airquality$Temp)
# We can also use boxplots to visually summarize numerical data
boxplot(airquality$Ozone)
# Using the formula
# Remember- The Tilde symbol "~" indicates which factor to group by
boxplot(airquality$Temp ~ airquality$Month)
# Summary statistics can be compared within subgroups using tapply()
# for example, to compute the mean temperature for each month the
# syntax is tapply(vector, index, function)
# Vector is the variable of interest. Index is the stratifying variables.
tapply(airquality$Temp, airquality$Month, mean)
library(faraway)
head(sat)
head(sat)
head(prostate)
range(prostate$lpsa)
setwd("~/")
pwd
knitr::opts_chunk$set(echo = TRUE)
# Importing the Dataset
dataset = read.csv('50_Startups.csv')
# install.packages('caTools')
library(caTools)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
test_set = subset(dataset, split == FALSE)
# Importing the Dataset
dataset = read.csv('50_Startups.csv')
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
## Including Plots
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
View(dataset)
View(dataset)
# Encoding categorical data
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
```{r, echo=TRUE}
# Importing the Dataset
dataset = read.csv('50_Startups.csv')
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.SPend + State,
data = training_set)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = training_set)
regressor
summary(regressor)
y_pred = predict(regressor, newdata = test_set)
y_pred = predict(regressor, newdata = test_set)
y_pred
y_pred = predict(regressor, newdata = test_set)
y_pred
clear
summar(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = dataset)
summar(regressor)
summary(regressor)
# Changing the data to "dataset" is not necessary, but we do it because we would like to use all the data # to see the correlations.
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Marketing.Spend,
data = dataset)
summary(regressor)
# Importing the Dataset
dataset = read.csv('50_Startups.csv')
# install.packages('caTools')
library(caTools)
## Splitting the dataset into the Training set and Test set
```{r, echo=TRUE}
# Importing the Dataset
dataset = read.csv('50_Startups.csv')
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Importing the Dataset
dataset = read.csv('50_Startups.csv')
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
## Splitting the dataset into the Training set and Test set
```{r, echo=TRUE}
# Importing the Dataset
dataset = read.csv('50_Startups.csv')
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
```
# Importing the Dataset
## Fitting Multiple Linear Regression to the Training set
```{r, echo=TRUE}
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = training_set)
dataset$State = factor(dataset$State,
levels = c('New York', 'Florida', 'California'),
labels = c(1, 2, 3))
regressor = lm(formula = Profit ~ R.D.Spend,
data = dataset)
summary(regressor)
backwardElimination(training_set, SL)
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
SL = 0.05
dataset = dataset[, c(1,2,3,4,5)]
backwardElimination(training_set, SL)
setwd("~/Documents/Data Science Courses/My Projects/Multiple Regression Analysis/R")
knitr::opts_chunk$set(echo = TRUE)
dataset = read.csv('Position_Salaries.csv')
dataset = read.csv('Position_Salaries.csv')
View(dataset)
View(dataset)
install.packages('rpart)
install.packages('rpart')
install.packages('rpart')
#install.packages('rpart')
library(rpart)
dataset = read.csv('Position_Salaries.csv')
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
#Fitting Decision Tree Regression to the Dataset
```{r, echo=TRUE}
#install.packages('rpart')
library(rpart)
regressor = rpart(formula = Salary ~., data = dataset)
regressor = rpart(formula = Salary ~., data = dataset)
## Predicting a new result
```{r, echo=TRUE}
y_pred = predict(regressor, data.frame(Level = 6.5))
# install.packages('ggplot2')
library(ggplot2)
# install.packages('ggplot2')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
# Visualising the Decision Tree Regression results (for higher resolution and smoother curve)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Decision Tree Regression)') +
xlab('Level') +
ylab('Salary')
y_pred
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
library(caTools)
set.seed(123)
# split = sample.split(dataset$Salary, SplitRatio = 0.8)
# training_set = subset(dataset, split == TRUE)
#install.packages('rpart')
library(rpart)
regressor = rpart(formula = Salary ~., data = dataset)
#install.packages('rpart')
library(rpart)
regressor = rpart(formula = Salary ~., data = dataset)
## Predicting a new result
```{r, echo=TRUE}
y_pred = predict(regressor, data.frame(Level = 6.5))
y_pred
# install.packages('ggplot2')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
regressor = rpart(formula = Salary ~.,
data = dataset,
control = rpart.control(minsplit = 1) )
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
